// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yogyrahmawan/logger_service/src/pb (interfaces: LoggerServiceClient,LoggerService_SendLogClient)

// Package mocks is a generated GoMock package.
package mockspb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/yogyrahmawan/logger_service/src/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockLoggerServiceClient is a mock of LoggerServiceClient interface
type MockLoggerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerServiceClientMockRecorder
}

// MockLoggerServiceClientMockRecorder is the mock recorder for MockLoggerServiceClient
type MockLoggerServiceClientMockRecorder struct {
	mock *MockLoggerServiceClient
}

// NewMockLoggerServiceClient creates a new mock instance
func NewMockLoggerServiceClient(ctrl *gomock.Controller) *MockLoggerServiceClient {
	mock := &MockLoggerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLoggerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerServiceClient) EXPECT() *MockLoggerServiceClientMockRecorder {
	return m.recorder
}

// GetLog mocks base method
func (m *MockLoggerServiceClient) GetLog(arg0 context.Context, arg1 *pb.GetLoggerRequest, arg2 ...grpc.CallOption) (*pb.LoggerResponsesMessage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLog", varargs...)
	ret0, _ := ret[0].(*pb.LoggerResponsesMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog
func (mr *MockLoggerServiceClientMockRecorder) GetLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockLoggerServiceClient)(nil).GetLog), varargs...)
}

// SendLog mocks base method
func (m *MockLoggerServiceClient) SendLog(arg0 context.Context, arg1 ...grpc.CallOption) (pb.LoggerService_SendLogClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendLog", varargs...)
	ret0, _ := ret[0].(pb.LoggerService_SendLogClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLog indicates an expected call of SendLog
func (mr *MockLoggerServiceClientMockRecorder) SendLog(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLog", reflect.TypeOf((*MockLoggerServiceClient)(nil).SendLog), varargs...)
}

// MockLoggerService_SendLogClient is a mock of LoggerService_SendLogClient interface
type MockLoggerService_SendLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerService_SendLogClientMockRecorder
}

// MockLoggerService_SendLogClientMockRecorder is the mock recorder for MockLoggerService_SendLogClient
type MockLoggerService_SendLogClientMockRecorder struct {
	mock *MockLoggerService_SendLogClient
}

// NewMockLoggerService_SendLogClient creates a new mock instance
func NewMockLoggerService_SendLogClient(ctrl *gomock.Controller) *MockLoggerService_SendLogClient {
	mock := &MockLoggerService_SendLogClient{ctrl: ctrl}
	mock.recorder = &MockLoggerService_SendLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerService_SendLogClient) EXPECT() *MockLoggerService_SendLogClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockLoggerService_SendLogClient) CloseAndRecv() (*pb.LoggerResponse, error) {
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*pb.LoggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockLoggerService_SendLogClientMockRecorder) CloseAndRecv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockLoggerService_SendLogClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockLoggerService_SendLogClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockLoggerService_SendLogClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockLoggerService_SendLogClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).Context))
}

// Header mocks base method
func (m *MockLoggerService_SendLogClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockLoggerService_SendLogClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockLoggerService_SendLogClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockLoggerService_SendLogClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockLoggerService_SendLogClient) Send(arg0 *pb.LoggerMessage) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockLoggerService_SendLogClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockLoggerService_SendLogClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockLoggerService_SendLogClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockLoggerService_SendLogClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockLoggerService_SendLogClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockLoggerService_SendLogClient)(nil).Trailer))
}
