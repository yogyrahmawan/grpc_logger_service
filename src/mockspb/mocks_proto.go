// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yogyrahmawan/grpc_logger_service/src/pb (interfaces: LoggerServiceClient)

// Package mockspb is a generated GoMock package.
package mockspb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/yogyrahmawan/grpc_logger_service/src/pb"
	grpc "google.golang.org/grpc"
)

// MockLoggerServiceClient is a mock of LoggerServiceClient interface
type MockLoggerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerServiceClientMockRecorder
}

// MockLoggerServiceClientMockRecorder is the mock recorder for MockLoggerServiceClient
type MockLoggerServiceClientMockRecorder struct {
	mock *MockLoggerServiceClient
}

// NewMockLoggerServiceClient creates a new mock instance
func NewMockLoggerServiceClient(ctrl *gomock.Controller) *MockLoggerServiceClient {
	mock := &MockLoggerServiceClient{ctrl: ctrl}
	mock.recorder = &MockLoggerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerServiceClient) EXPECT() *MockLoggerServiceClientMockRecorder {
	return m.recorder
}

// GetLog mocks base method
func (m *MockLoggerServiceClient) GetLog(arg0 context.Context, arg1 *pb.GetLoggerRequest, arg2 ...grpc.CallOption) (*pb.LoggerResponsesMessage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLog", varargs...)
	ret0, _ := ret[0].(*pb.LoggerResponsesMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog
func (mr *MockLoggerServiceClientMockRecorder) GetLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockLoggerServiceClient)(nil).GetLog), varargs...)
}

// SendLog mocks base method
func (m *MockLoggerServiceClient) SendLog(arg0 context.Context, arg1 *pb.LoggerMessage, arg2 ...grpc.CallOption) (*pb.LoggerResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendLog", varargs...)
	ret0, _ := ret[0].(*pb.LoggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLog indicates an expected call of SendLog
func (mr *MockLoggerServiceClientMockRecorder) SendLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLog", reflect.TypeOf((*MockLoggerServiceClient)(nil).SendLog), varargs...)
}
