// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoggerMessage struct {
	IpPort      string                     `protobuf:"bytes,1,opt,name=IpPort" json:"IpPort,omitempty"`
	ServiceName string                     `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Level       string                     `protobuf:"bytes,3,opt,name=Level" json:"Level,omitempty"`
	Text        string                     `protobuf:"bytes,4,opt,name=Text" json:"Text,omitempty"`
	CreatedAt   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *LoggerMessage) Reset()                    { *m = LoggerMessage{} }
func (m *LoggerMessage) String() string            { return proto.CompactTextString(m) }
func (*LoggerMessage) ProtoMessage()               {}
func (*LoggerMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *LoggerMessage) GetIpPort() string {
	if m != nil {
		return m.IpPort
	}
	return ""
}

func (m *LoggerMessage) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *LoggerMessage) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LoggerMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *LoggerMessage) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*LoggerMessage)(nil), "pb.LoggerMessage")
}

func init() { proto.RegisterFile("logger.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc9, 0x4f, 0x4f,
	0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x92, 0x4f, 0xcf,
	0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x24, 0x95, 0xa6, 0xe9, 0x87, 0x64, 0xe6, 0xa6, 0x16,
	0x97, 0x24, 0xe6, 0x16, 0x40, 0x14, 0x29, 0xad, 0x65, 0xe4, 0xe2, 0xf5, 0x01, 0xeb, 0xf2, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe3, 0x62, 0xf3, 0x2c, 0x08, 0xc8, 0x2f, 0x2a, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x14, 0xb8, 0xb8, 0x83, 0x53, 0x8b, 0xca,
	0x32, 0x93, 0x53, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc0, 0x92, 0xc8, 0x42, 0x42, 0x22, 0x5c,
	0xac, 0x3e, 0xa9, 0x65, 0xa9, 0x39, 0x12, 0xcc, 0x60, 0x39, 0x08, 0x47, 0x48, 0x88, 0x8b, 0x25,
	0x24, 0xb5, 0xa2, 0x44, 0x82, 0x05, 0x2c, 0x08, 0x66, 0x0b, 0x59, 0x70, 0x71, 0x3a, 0x17, 0xa5,
	0x26, 0x96, 0xa4, 0xa6, 0x38, 0x96, 0x48, 0xb0, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xe9, 0x41,
	0x9c, 0xaa, 0x07, 0x73, 0xaa, 0x1e, 0xdc, 0xa9, 0x41, 0x08, 0xc5, 0x49, 0x6c, 0x60, 0x69, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x92, 0x0c, 0x3e, 0xeb, 0x00, 0x00, 0x00,
}
