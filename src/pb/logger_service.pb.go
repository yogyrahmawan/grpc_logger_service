// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LoggerService service

type LoggerServiceClient interface {
	SendLog(ctx context.Context, opts ...grpc.CallOption) (LoggerService_SendLogClient, error)
	GetLog(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LoggerResponsesMessage, error)
}

type loggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoggerServiceClient(cc *grpc.ClientConn) LoggerServiceClient {
	return &loggerServiceClient{cc}
}

func (c *loggerServiceClient) SendLog(ctx context.Context, opts ...grpc.CallOption) (LoggerService_SendLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LoggerService_serviceDesc.Streams[0], c.cc, "/pb.LoggerService/SendLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerServiceSendLogClient{stream}
	return x, nil
}

type LoggerService_SendLogClient interface {
	Send(*LoggerMessage) error
	CloseAndRecv() (*LoggerResponse, error)
	grpc.ClientStream
}

type loggerServiceSendLogClient struct {
	grpc.ClientStream
}

func (x *loggerServiceSendLogClient) Send(m *LoggerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loggerServiceSendLogClient) CloseAndRecv() (*LoggerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LoggerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerServiceClient) GetLog(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LoggerResponsesMessage, error) {
	out := new(LoggerResponsesMessage)
	err := grpc.Invoke(ctx, "/pb.LoggerService/GetLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoggerService service

type LoggerServiceServer interface {
	SendLog(LoggerService_SendLogServer) error
	GetLog(context.Context, *google_protobuf1.Empty) (*LoggerResponsesMessage, error)
}

func RegisterLoggerServiceServer(s *grpc.Server, srv LoggerServiceServer) {
	s.RegisterService(&_LoggerService_serviceDesc, srv)
}

func _LoggerService_SendLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggerServiceServer).SendLog(&loggerServiceSendLogServer{stream})
}

type LoggerService_SendLogServer interface {
	SendAndClose(*LoggerResponse) error
	Recv() (*LoggerMessage, error)
	grpc.ServerStream
}

type loggerServiceSendLogServer struct {
	grpc.ServerStream
}

func (x *loggerServiceSendLogServer) SendAndClose(m *LoggerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loggerServiceSendLogServer) Recv() (*LoggerMessage, error) {
	m := new(LoggerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LoggerService_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoggerService/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).GetLog(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LoggerService",
	HandlerType: (*LoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLog",
			Handler:    _LoggerService_GetLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLog",
			Handler:       _LoggerService_SendLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logger_service.proto",
}

func init() { proto.RegisterFile("logger_service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xc9, 0x4f, 0x4f,
	0x4f, 0x2d, 0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x81, 0xc8, 0x40, 0x44, 0xa4, 0x44, 0xa1, 0xea, 0x8a, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0xa1, 0x0a, 0xa5, 0xc4, 0xd0, 0x84, 0x8b, 0xa1, 0xe2, 0xd2, 0xe9,
	0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49,
	0x25, 0x54, 0x52, 0x06, 0x2a, 0x99, 0x58, 0x90, 0xa9, 0x9f, 0x98, 0x97, 0x97, 0x5f, 0x92, 0x58,
	0x92, 0x99, 0x9f, 0x07, 0xd5, 0x6a, 0x34, 0x91, 0x89, 0x8b, 0xd7, 0x07, 0x6c, 0x6a, 0x30, 0xc4,
	0x4d, 0x42, 0x46, 0x5c, 0xec, 0xc1, 0xa9, 0x79, 0x29, 0x3e, 0xf9, 0xe9, 0x42, 0x82, 0x7a, 0x05,
	0x49, 0x7a, 0x10, 0x59, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x29, 0x21, 0x84, 0x50, 0x10,
	0xd4, 0x15, 0x1a, 0x8c, 0x42, 0xa7, 0x19, 0xb9, 0xd8, 0xdc, 0x53, 0x4b, 0x40, 0x7a, 0xc4, 0xf4,
	0x20, 0xf6, 0xe9, 0xc1, 0x1c, 0xa3, 0xe7, 0x0a, 0x72, 0x8c, 0x94, 0x14, 0xa6, 0xc6, 0x62, 0xa8,
	0xa1, 0x4a, 0x3d, 0x8c, 0x4d, 0x97, 0x9f, 0x4c, 0x66, 0x6a, 0x65, 0x14, 0xe2, 0x01, 0x3b, 0xb3,
	0xcc, 0x50, 0x3f, 0x27, 0x3f, 0xbd, 0x38, 0x4a, 0x56, 0x48, 0x1a, 0x99, 0xaf, 0x5f, 0x0d, 0x0d,
	0xb7, 0xf8, 0xbc, 0xc4, 0xdc, 0xd4, 0xda, 0x28, 0x6d, 0x21, 0x4d, 0x3c, 0xd2, 0xfa, 0x39, 0xa9,
	0x65, 0xa9, 0x39, 0xfa, 0xd5, 0x60, 0xaa, 0x36, 0x4a, 0x53, 0x48, 0x1d, 0x9f, 0xe2, 0x92, 0xd4,
	0x8a, 0x12, 0xfd, 0x6a, 0x10, 0x59, 0x9b, 0xc4, 0x06, 0x76, 0xba, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x9b, 0xcf, 0x3f, 0xe7, 0xae, 0x01, 0x00, 0x00,
}
